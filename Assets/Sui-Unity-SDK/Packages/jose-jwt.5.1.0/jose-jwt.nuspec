<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>jose-jwt</id>
    <version>5.1.0</version>
    <authors>Dmitry Vsekhvalnov</authors>
    <license type="expression">MIT</license>
    <licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>
    <readme>README.md</readme>
    <projectUrl>https://github.com/dvsekhvalnov/jose-jwt</projectUrl>
    <description>Javascript Object Signing and Encryption (JOSE), JSON Web Token (JWT), JSON Web Encryption (JWE) and JSON Web Key (JWK) Implementation for .NET 

Ultimate Javascript Object Signing and Encryption (JOSE), JSON Web Token (JWT), JSON Web Encryption (JWE) and JSON Web Key (JWK) Implementation for .NET and .NET Core. Minimallistic. Zero-dependency. Full suite of signature and encryption algorithms. 
Supports generating, decoding, encryption and compression of JSON Web Tokens. Full-blown support for JSON Web Keys (RFC 7517) and two way bridging with .NET core cryptography. JSON parsing agnostic. Supports two-phase validation. FIPS compliant. Unencoded payload and detached content support (RFC 7797). 
JSON Web Encryption (JWE, RFC 7516) support. Cross compatible with all major operating systems - Windows, Linux, MacOS and FreeBSD.

Supported algorithms 

Signing: 
  - HMAC signatures with HS256, HS384 and HS512. 
  - ECDSA signatures with ES256, ES384 and ES512. 
  - RSASSA-PKCS1-V1_5 signatures with RS256, RS384 and RS512. 
  - RSASSA-PSS signatures (probabilistic signature scheme with appendix) with PS256, PS384 and PS512. 
  - NONE (unprotected) plain text algorithm without integrity protection 

Encryption: 
  - RSAES OAEP 256 384 512 encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM 
  - RSAES OAEP encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM 
  - RSAES-PKCS1-V1_5 encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM 
  - Direct symmetric key encryption with pre-shared key A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM 
  - A128KW, A192KW, A256KW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM 
  - A128GCMKW, A192GCMKW, A256GCMKW encryption with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM and A256GCM 
  - ECDH-ES encryption with A128CBC-HS256, A128GCM, A192GCM, A256GCM 
  - ECDH-ES+A128KW, ECDH-ES+A192KW, ECDH-ES+A256KW encryption with A128CBC-HS256, A128GCM, A192GCM, A256GCM 
  - PBES2-HS256+A128KW, PBES2-HS384+A192KW, PBES2-HS512+A256KW with A128CBC-HS256, A192CBC-HS384, A256CBC-HS512, A128GCM, A192GCM, A256GCM 

Compression: 
  - DEFLATE compression

RFC 7797: 
  - Unencoded payload
  - Detached content

RFC 7516: 
  - JSON Web Encryption (JWE) support

JSON Web Key (RFC 7517):
  - RSA, EC, oct keys
  - X509 Chains, SHA1 &amp; SHA2 thumbprints</description>
    <releaseNotes>Added new key management algorithms RSA-OAEP-384 and RSA-OAEP-512. Security fixes to prevent truncated AES GCM tag attacks.</releaseNotes>
    <copyright>Copyright dvsekhvalnov 2014-2024</copyright>
    <tags>jose jwt json jwa jwe jws jwk aes cbc gcm rsa hmac sha rsassa pss rsaes oaep pkcs1-v1_5 es elliptic curve diffe hellman agreement ecdsa key wrap kw ecdh pbes pbes2 pbkdf pbkdf2 password based encryption javascript object signing two phase validation netcore clr coreclr portable fips compliant open banking detached content unencoded payload json web key</tags>
    <repository type="git" commit="99bd052f467662f487374159acd5d8c2c6005a77" />
    <dependencies>
      <group targetFramework=".NETFramework4.0" />
      <group targetFramework=".NETFramework4.6.1" />
      <group targetFramework=".NETFramework4.7.2" />
      <group targetFramework=".NETStandard1.4">
        <dependency id="NETStandard.Library" version="1.6.1" exclude="Build,Analyzers" />
        <dependency id="Newtonsoft.Json" version="13.0.1" exclude="Build,Analyzers" />
        <dependency id="System.IO.Compression" version="4.3.0" exclude="Build,Analyzers" />
        <dependency id="System.Runtime.InteropServices" version="4.3.0" exclude="Build,Analyzers" />
        <dependency id="System.Runtime.Serialization.Primitives" version="4.3.0" exclude="Build,Analyzers" />
        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.0" exclude="Build,Analyzers" />
        <dependency id="System.Security.Cryptography.Cng" version="4.3.0" exclude="Build,Analyzers" />
        <dependency id="System.Security.Cryptography.Csp" version="4.3.0" exclude="Build,Analyzers" />
        <dependency id="System.Security.Cryptography.X509Certificates" version="4.3.0" exclude="Build,Analyzers" />
      </group>
      <group targetFramework=".NETStandard2.1">
        <dependency id="System.Security.Cryptography.Algorithms" version="4.3.1" exclude="Build,Analyzers" />
        <dependency id="System.Security.Cryptography.Cng" version="4.7.0" exclude="Build,Analyzers" />
        <dependency id="System.Text.Json" version="5.0.2" exclude="Build,Analyzers" />
      </group>
    </dependencies>
    <frameworkAssemblies>
      <frameworkAssembly assemblyName="Microsoft.CSharp" targetFramework=".NETFramework4.0, .NETFramework4.6.1, .NETFramework4.7.2" />
      <frameworkAssembly assemblyName="System" targetFramework=".NETFramework4.0, .NETFramework4.6.1, .NETFramework4.7.2" />
      <frameworkAssembly assemblyName="System.Web.Extensions" targetFramework=".NETFramework4.0, .NETFramework4.6.1, .NETFramework4.7.2" />
    </frameworkAssemblies>
  </metadata>
</package>